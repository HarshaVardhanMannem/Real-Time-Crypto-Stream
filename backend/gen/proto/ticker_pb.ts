// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=none"
// @generated from file proto/ticker.proto (package crypto.ticker, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Request to subscribe/unsubscribe to a ticker symbol (e.g. BTCUSD)
 *
 * @generated from message crypto.ticker.TickerRequest
 */
export class TickerRequest extends Message<TickerRequest> {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol = "";

  constructor(data?: PartialMessage<TickerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "crypto.ticker.TickerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TickerRequest {
    return new TickerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TickerRequest {
    return new TickerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TickerRequest {
    return new TickerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TickerRequest | PlainMessage<TickerRequest> | undefined, b: TickerRequest | PlainMessage<TickerRequest> | undefined): boolean {
    return proto3.util.equals(TickerRequest, a, b);
  }
}

/**
 * Server-side streamed price update
 *
 * @generated from message crypto.ticker.PriceUpdate
 */
export class PriceUpdate extends Message<PriceUpdate> {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol = "";

  /**
   * @generated from field: double price = 2;
   */
  price = 0;

  /**
   * @generated from field: string iso_timestamp = 3;
   */
  isoTimestamp = "";

  constructor(data?: PartialMessage<PriceUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "crypto.ticker.PriceUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "iso_timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PriceUpdate {
    return new PriceUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PriceUpdate {
    return new PriceUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PriceUpdate {
    return new PriceUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: PriceUpdate | PlainMessage<PriceUpdate> | undefined, b: PriceUpdate | PlainMessage<PriceUpdate> | undefined): boolean {
    return proto3.util.equals(PriceUpdate, a, b);
  }
}

